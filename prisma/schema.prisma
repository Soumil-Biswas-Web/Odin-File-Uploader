generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model messages {
  message_id Int     @id @default(autoincrement())
  username   String? @db.VarChar(255)
  message    String?
  timestamp  String? @db.VarChar(255)
}

model users {
  username   String?  @db.VarChar(255)
  first_name String?  @db.VarChar(255)
  last_name  String?  @db.VarChar(255)
  password   String?  @db.VarChar(255)
  ismember   Boolean?
  isadmin    Boolean?
  id         Int      @id @default(autoincrement())
}

model ofu_Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model ofu_User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  folders   ofu_Folder[]
  files     ofu_File[]
  shareLinks ofu_ShareLink[] @relation("UserShareLinks") // Added relation name
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   ofu_Profile?
}

model ofu_Folder {
  id        String   @id @default(cuid())
  name      String
  parentFolderId String?
  parentFolder   ofu_Folder? @relation("Children", fields: [parentFolderId], references: [id])
  children   ofu_Folder[] @relation("Children")
  owner      ofu_User     @relation(fields: [ownerId], references: [id])
  ownerId    String
  files      ofu_File[]
  shareLinks ofu_ShareLink[] @relation("FolderShareLinks") // Added relation name
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ofu_File {
  id        String   @id @default(cuid())
  name      String
  url       String
  size      Int
  type      String
  folderId  String?   
  folder    ofu_Folder?   @relation(fields: [folderId], references: [id])
  owner     ofu_User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  publicId  String?
  createdAt DateTime @default(now())
}

model ofu_ShareLink {
  id        String   @id @default(cuid())
  token     String   @unique
  folderId  String
  folder    ofu_Folder   @relation(fields: [folderId], references: [id], name: "FolderShareLinks")
  expiresAt DateTime
  createdById String
  createdBy ofu_User     @relation(fields: [createdById], references: [id], name: "UserShareLinks")
  createdAt DateTime @default(now())
}

model ofu_Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      ofu_User     @relation(fields: [userId], references: [id])
  firstName String
  lastName  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}